name: CI/CD with GitHub Actions

# Triggers the workflow(pipeline)
on:
  push:
    branches: ["cicd/github-actions-resolve"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  ECS-deploy:
    runs-on: ubuntu-latest
    # you can also define env here for env-vars

    steps:
      - name: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to AWS ECR
        id: login-ecr # store as var like ansible
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy private key for terraform and ansible uses
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-key.pem
          chmod 600 ~/.ssh/ec2-key.pem

      - name: Build and push Docker image for backend
        id: build-image-1
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.REPO_NAME }}:backend
          dockerfile: backend/Dockerfile

      - name: Build and push Docker image for frontend
        id: build-image-2
        uses: docker/build-push-action@v2
        with:
          context: frontend
          push: true
          tags: ${{ secrets.REPO_NAME }}:frontend
          dockerfile: frontend/Dockerfile

      # - name: Build and push frontend image
      #   run: |
      #     cd ../frontend
      #     docker build -t ${{ secrets.REPO_NAME }}:frontend
      #     docker push ${{ secrets.REPO_NAME }}:frontend

      - name: Install dependencies for ansible 
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible boto3

      - name: Terraform apply
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          cd terraform
          terraform init 
          terraform plan
          terraform destroy --auto-approve  # for removing existing Infra on aws
      #          terraform apply -var="REPO_NAME=${{ secrets.REPO_NAME }}" -var="TAG=${{ github.sha }}" --auto-approve

      - name: Run Ansible playbook
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd ansible
          ansible-playbook playbook.yml
